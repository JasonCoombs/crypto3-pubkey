//---------------------------------------------------------------------------//// Copyright (c) 2018-2020 Mikhail Komarov <nemo@nil.foundation>//// Distributed under the Boost Software License, Version 1.0// See accompanying file LICENSE_1_0.txt or copy at// http://www.boost.org/LICENSE_1_0.txt//---------------------------------------------------------------------------//#ifndef CRYPTO3_PUBKEY_XMSS_PRIVATEKEY_HPP#define CRYPTO3_PUBKEY_XMSS_PRIVATEKEY_HPP#include <cstddef>#include <iterator>#include <memory>#include <nil/crypto3/pubkey/pk_keys.hpp>#include <nil/crypto3/pubkey/xmss/xmss_parameters.hpp>#include <nil/crypto3/pubkey/xmss/xmss_publickey.hpp>#include <nil/crypto3/pubkey/xmss/atomic.hpp>#include <nil/crypto3/pubkey/xmss/xmss_common_ops.hpp>#include <nil/crypto3/pubkey/xmss/xmss_wots_privatekey.hpp>#include <nil/crypto3/pubkey/xmss/xmss_index_registry.hpp>namespace nil {    namespace crypto3 {        /**         * An XMSS: Extended Hash-Based Signature private key.         * The XMSS private key does not support the X509 and PKCS7 standard. Instead         * the raw format described in [1] is used.         *         *   [1] XMSS: Extended Hash-Based Signatures,         *       draft-itrf-cfrg-xmss-hash-based-signatures-06         *       Release: July 2016.         *       https://datatracker.ietf.org/doc/         *       draft-irtf-cfrg-xmss-hash-based-signatures/?include_text=1         **/        class CRYPTO3_PUBLIC_API(            2, 0) XMSS_PrivateKey final : public virtual XMSS_PublicKey,                                          public XMSS_Common_Ops,                                          public virtual private_key_policy {        public:            /**             * Creates a new XMSS private key for the chosen XMSS signature method.             * New seeds for public/private key and pseudo random function input are             * generated using the provided RNG. The appropriate WOTS signature method             * will be automatically set based on the chosen XMSS signature method.             *             * @param xmss_algo_id Identifier for the selected XMSS signature method.             * @param rng A random number generator to use for key generation.             **/            XMSS_PrivateKey(XMSS_Parameters::xmss_algorithm_t xmss_algo_id, RandomNumberGenerator &rng);            /**             * Creates an XMSS_PrivateKey from a byte sequence produced by             * raw_private_key().             *             * @param raw_key An XMSS private key serialized using raw_private_key().             **/            XMSS_PrivateKey(const secure_vector<uint8_t> &raw_key);            /**             * Creates a new XMSS private key for the chosen XMSS signature method             * using precomputed seeds for public/private keys and pseudo random             * function input. The appropriate WOTS signature method will be             * automatically set, based on the chosen XMSS signature method.             *             * @param xmss_algo_id Identifier for the selected XMSS signature method.             * @param idx_leaf Index of the next unused leaf.             * @param wots_priv_seed A seed to generate a Winternitz-One-Time-             *                      Signature private key from.             * @param prf a secret n-byte key sourced from a secure source             *        of uniformly random data.             * @param root Root node of the binary hash tree.             * @param public_seed The public seed.             **/            XMSS_PrivateKey(XMSS_Parameters::xmss_algorithm_t xmss_algo_id,                            size_t idx_leaf,                            const secure_vector<uint8_t> &wots_priv_seed,                            const secure_vector<uint8_t> &prf,                            const secure_vector<uint8_t> &root,                            const secure_vector<uint8_t> &public_seed) :                XMSS_PublicKey(xmss_algo_id, root, public_seed),                XMSS_Common_Ops(xmss_algo_id),                m_wots_priv_key(XMSS_PublicKey::m_xmss_params.ots_oid(), public_seed, wots_priv_seed), m_prf(prf),                m_index_reg(XMSS_Index_Registry::get_instance()) {                set_unused_leaf_index(idx_leaf);            }            /**             * Retrieves the last unused leaf index of the private key. Reusing a leaf             * by utilizing leaf indices lower than the last unused leaf index will             * compromise security.             *             * @return Index of the last unused leaf.             **/            size_t unused_leaf_index() const {                return *recover_global_leaf_index();            }            /**             * Sets the last unused leaf index of the private key. The leaf index             * will be updated automatically during every signing operation, and             * should not be set manually.             *             * @param idx Index of the last unused leaf.             **/            void set_unused_leaf_index(size_t idx) {                if (idx >= (1ull << XMSS_PublicKey::m_xmss_params.tree_height())) {                    throw Integrity_Failure(                        "XMSS private key leaf index out of "                        "bounds.");                } else {                    std::atomic<size_t> &index = static_cast<std::atomic<size_t> &>(*recover_global_leaf_index());                    size_t current = 0;                    do {                        current = index.load();                        if (current > idx) {                            return;                        }                    } while (!index.compare_exchange_strong(current, idx));                }            }            size_t reserve_unused_leaf_index() {                size_t idx = (static_cast<std::atomic<size_t> &>(*recover_global_leaf_index())).fetch_add(1);                if (idx >= (1ull << XMSS_PublicKey::m_xmss_params.tree_height())) {                    throw Integrity_Failure(                        "XMSS private key, one time signatures "                        "exhausted.");                }                return idx;            }            /**             * Winternitz One Time Signature Scheme key utilized for signing             * operations.             *             * @return WOTS+ private key.             **/            const XMSS_WOTS_PrivateKey &wots_private_key() const {                return m_wots_priv_key;            }            /**             * Winternitz One Time Signature Scheme key utilized for signing             * operations.             *             * @return WOTS+ private key.             **/            XMSS_WOTS_PrivateKey &wots_private_key() {                return m_wots_priv_key;            }            const secure_vector<uint8_t> &prf() const {                return m_prf;            }            secure_vector<uint8_t> &prf() {                return m_prf;            }            void set_public_seed(const secure_vector<uint8_t> &public_seed)                override {                m_public_seed = public_seed;                m_wots_priv_key.set_public_seed(public_seed);            }            void set_public_seed(secure_vector<uint8_t> &&public_seed)                override {                m_public_seed = std::move(public_seed);                m_wots_priv_key.set_public_seed(m_public_seed);            }            const secure_vector<uint8_t> &public_seed() const                override {                return m_public_seed;            }            std::unique_ptr<pk_operations::signature> create_signature_op(RandomNumberGenerator &, const std::string &,                                                                          const std::string &provider) const                override;            secure_vector<uint8_t> private_key_bits() const                override {                return                    raw_private_key();            }            size_t size() const                override {                return                    XMSS_PublicKey::size()                    + sizeof(uint64_t) +                    2 * XMSS_PublicKey::m_xmss_params.                        element_size();            }            /**             * Generates a non standartized byte sequence representing the XMSS             * private key.             *             * @return byte sequence consisting of the following elements in order:             *         4-byte OID, n-byte root node, n-byte public seed,             *         8-byte unused leaf index, n-byte prf seed, n-byte private seed.             **/            secure_vector<uint8_t> raw_private_key() const;            /**             * Algorithm 9: "treeHash"             * Computes the internal n-byte nodes of a Merkle tree.             *             * @param start_idx The start index.             * @param target_node_height Height of the target node.             * @param adrs Address of the tree containing the target node.             *             * @return The root node of a tree of height target_node height with the             *         leftmost leaf being the hash of the WOTS+ pk with index             *         start_idx.             **/            secure_vector<uint8_t> tree_hash(size_t start_idx, size_t target_node_height, XMSS_Address &adrs);        private:            /**             * Fetches shared unused leaf index from the index registry             **/            std::shared_ptr<Atomic<size_t>> recover_global_leaf_index() const;            inline void tree_hash_subtree(secure_vector<uint8_t> &result, size_t start_idx, size_t target_node_height,                                          XMSS_Address &adrs) {                return tree_hash_subtree(result, start_idx, target_node_height, adrs, m_hash);            }            /**             * Helper for multithreaded tree hashing.             */            void tree_hash_subtree(secure_vector<uint8_t> &result, size_t start_idx, size_t target_node_height,                                   XMSS_Address &adrs, XMSS_Hash &hash);            XMSS_WOTS_PrivateKey m_wots_priv_key;            secure_vector<uint8_t> m_prf;            XMSS_Index_Registry &m_index_reg;        };        XMSS_PrivateKey::XMSS_PrivateKey(const secure_vector<uint8_t> &raw_key) :            XMSS_PublicKey(unlock(raw_key)), XMSS_Common_Ops(XMSS_PublicKey::m_xmss_params.oid()),            m_wots_priv_key(m_wots_params.oid(), m_public_seed), m_index_reg(XMSS_Index_Registry::get_instance()) {            BOOST_ASSERT_MSG(sizeof(size_t) >=                                 std::ceil(static_cast<float>(XMSS_PublicKey::m_xmss_params.tree_height()) / 8.f),                             "System type \"size_t\" not big enough to support"                             " leaf index.");            if (raw_key.size() != size()) {                throw Integrity_Failure("Invalid XMSS private key size detected.");            }            // extract & copy unused leaf index from raw_key.            uint64_t unused_leaf = 0;            auto begin = (raw_key.begin() + XMSS_PublicKey::size());            auto end = raw_key.begin() + XMSS_PublicKey::size() + sizeof(uint64_t);            for (auto &i = begin; i != end; i++) {                unused_leaf = ((unused_leaf << 8) | *i);            }            if (unused_leaf >= (1ull << (XMSS_PublicKey::m_xmss_params.tree_height() - 1))) {                throw Integrity_Failure(                    "XMSS private key leaf index out of "                    "bounds.");            }            begin = end;            end = begin + XMSS_PublicKey::m_xmss_params.element_size();            m_prf.clear();            m_prf.reserve(XMSS_PublicKey::m_xmss_params.element_size());            std::copy(begin, end, std::back_inserter(m_prf));            begin = end;            end = begin + m_wots_params.element_size();            m_wots_priv_key.set_private_seed(secure_vector<uint8_t>(begin, end));            set_unused_leaf_index(static_cast<size_t>(unused_leaf));        }        XMSS_PrivateKey::XMSS_PrivateKey(XMSS_Parameters::xmss_algorithm_t xmss_algo_id, RandomNumberGenerator &rng) :            XMSS_PublicKey(xmss_algo_id, rng), XMSS_Common_Ops(xmss_algo_id),            m_wots_priv_key(XMSS_PublicKey::m_xmss_params.ots_oid(), public_seed(), rng),            m_prf(rng.random_vec(XMSS_PublicKey::m_xmss_params.element_size())),            m_index_reg(XMSS_Index_Registry::get_instance()) {            XMSS_Address adrs;            set_root(tree_hash(0, XMSS_PublicKey::m_xmss_params.tree_height(), adrs));        }        secure_vector<uint8_t> XMSS_PrivateKey::tree_hash(size_t start_idx, size_t target_node_height,                                                          XMSS_Address &adrs) {            BOOST_ASSERT_MSG((start_idx % (1 << target_node_height)) == 0,                             "Start index must be divisible by 2^{target node height}.");#if defined(CRYPTO3_TARGET_OS_HAS_THREADS)            // dertermine number of parallel tasks to split the tree_hashing into.            size_t split_level =                std::min({target_node_height, static_cast<size_t>(std::ceil(std::log2(XMSS_Tools::max_threads())))});            // skip parallelization overhead for leaf nodes.            if (split_level == 0) {#endif                secure_vector<uint8_t> result;                tree_hash_subtree(result, start_idx, target_node_height, adrs);                return result;#if defined(CRYPTO3_TARGET_OS_HAS_THREADS)            }            size_t subtrees = 1 << split_level;            size_t last_idx = static_cast<size_t>(1 << (target_node_height)) + start_idx;            size_t offs = (last_idx - start_idx) / subtrees;            uint8_t level = split_level;    // current level in the tree            BOOST_ASSERT_MSG((last_idx - start_idx) % subtrees == 0,                             "Number of worker threads in tree_hash need to divide range "                             "of calculated nodes.");            std::vector<secure_vector<uint8_t>> nodes(                subtrees, secure_vector<uint8_t>(XMSS_PublicKey::m_xmss_params.element_size()));            std::vector<XMSS_Address> node_addresses(subtrees, adrs);            std::vector<XMSS_Hash> xmss_hash(subtrees, m_hash);            std::vector<std::thread> threads;            threads.reserve(subtrees);            // Calculate multiple subtrees in parallel.            for (size_t i = 0; i < subtrees; i++) {                using tree_hash_subtree_fn_t =                    void (XMSS_PrivateKey::*)(secure_vector<uint8_t> &, size_t, size_t, XMSS_Address &, XMSS_Hash &);                threads.emplace_back(                    std::thread(static_cast<tree_hash_subtree_fn_t>(&XMSS_PrivateKey::tree_hash_subtree),                                this,                                std::ref(nodes[i]),                                start_idx + i * offs,                                target_node_height - split_level,                                std::ref(node_addresses[i]),                                std::ref(xmss_hash[i])));            }            for (auto &t : threads) {                t.join();            }            threads.clear();            // Parallelize the top tree levels horizontally            while (level-- > 1) {                std::vector<secure_vector<uint8_t>> ro_nodes(nodes.begin(), nodes.begin() + (1 << (level + 1)));                for (size_t i = 0; i < (1U << level); i++) {                    node_addresses[i].set_tree_height(target_node_height - (level + 1));                    node_addresses[i].set_tree_index((node_addresses[2 * i + 1].get_tree_index() - 1) >> 1);                    using rnd_tree_hash_fn_t = void (XMSS_PrivateKey::*)(secure_vector<uint8_t> &,                                                                         const secure_vector<uint8_t> &,                                                                         const secure_vector<uint8_t> &,                                                                         XMSS_Address &adrs,                                                                         const secure_vector<uint8_t> &,                                                                         XMSS_Hash &);                    threads.emplace_back(                        std::thread(static_cast<rnd_tree_hash_fn_t>(&XMSS_PrivateKey::randomize_tree_hash),                                    this,                                    std::ref(nodes[i]),                                    std::ref(ro_nodes[2 * i]),                                    std::ref(ro_nodes[2 * i + 1]),                                    std::ref(node_addresses[i]),                                    std::ref(this->public_seed()),                                    std::ref(xmss_hash[i])));                }                for (auto &t : threads) {                    t.join();                }                threads.clear();            }            // Avoid creation an extra thread to calculate root node.            node_addresses[0].set_tree_height(target_node_height - 1);            node_addresses[0].set_tree_index((node_addresses[1].get_tree_index() - 1) >> 1);            randomize_tree_hash(nodes[0], nodes[0], nodes[1], node_addresses[0], this->public_seed());            return nodes[0];#endif        }        void XMSS_PrivateKey::tree_hash_subtree(secure_vector<uint8_t> &result, size_t start_idx,                                                size_t target_node_height, XMSS_Address &adrs, XMSS_Hash &hash) {            const secure_vector<uint8_t> &seed = this->public_seed();            std::vector<secure_vector<uint8_t>> nodes(                target_node_height + 1, secure_vector<uint8_t>(XMSS_PublicKey::m_xmss_params.element_size()));            // node stack, holds all nodes on stack and one extra "pending" node. This            // temporary node referred to as "node" in the XMSS standard document stays            // a pending element, meaning it is not regarded as element on the stack            // until level is increased.            std::vector<uint8_t> node_levels(target_node_height + 1);            uint8_t level = 0;    // current level on the node stack.            XMSS_WOTS_PublicKey pk(m_wots_priv_key.wots_parameters().oid(), seed);            size_t last_idx = static_cast<size_t>(1 << target_node_height) + start_idx;            for (size_t i = start_idx; i < last_idx; i++) {                adrs.set_type(XMSS_Address::Type::OTS_Hash_Address);                adrs.set_ots_address(i);                this->wots_private_key().generate_public_key(pk,                                                             // getWOTS_SK(SK, s + i), reference implementation uses                                                             // adrs instead of zero padded index s + i.                                                             this->wots_private_key().at(adrs, hash), adrs, hash);                adrs.set_type(XMSS_Address::Type::LTree_Address);                adrs.set_ltree_address(i);                create_l_tree(nodes[level], pk, adrs, seed, hash);                node_levels[level] = 0;                adrs.set_type(XMSS_Address::Type::Hash_Tree_Address);                adrs.set_tree_height(0);                adrs.set_tree_index(i);                while (level > 0 && node_levels[level] == node_levels[level - 1]) {                    adrs.set_tree_index(((adrs.get_tree_index() - 1) >> 1));                    randomize_tree_hash(nodes[level - 1], nodes[level - 1], nodes[level], adrs, seed, hash);                    node_levels[level - 1]++;                    level--;    // Pop stack top element                    adrs.set_tree_height(adrs.get_tree_height() + 1);                }                level++;    // push temporary node to stack            }            result = nodes[level - 1];        }        std::shared_ptr<Atomic<size_t>>            XMSS_PrivateKey::recover_global_leaf_index() const {            BOOST_ASSERT_MSG(m_wots_priv_key.private_seed().size() == XMSS_PublicKey::m_xmss_params.element_size() &&                                 m_prf.size() == XMSS_PublicKey::m_xmss_params.element_size(),                             "Trying to retrieve index for partially initialized "                             "key.");            return m_index_reg.get(m_wots_priv_key.private_seed(), m_prf);        }        secure_vector<uint8_t> XMSS_PrivateKey::raw_private_key() const {            std::vector<uint8_t> pk {raw_public_key()};            secure_vector<uint8_t> result(pk.begin(), pk.end());            result.reserve(size());            for (int i = 7; i >= 0; i--) {                result.push_back(static_cast<uint8_t>(static_cast<uint64_t>(unused_leaf_index()) >> 8 * i));            }            std::copy(m_prf.begin(), m_prf.end(), std::back_inserter(result));            std::copy(m_wots_priv_key.private_seed().begin(), m_wots_priv_key.private_seed().end(),                      std::back_inserter(result));            return result;        }        std::unique_ptr<pk_operations::signature>            XMSS_PrivateKey::create_signature_op(RandomNumberGenerator &,                                                 const std::string &,                                                 const std::string &provider) const {            if (provider == "core" || provider.empty()) {                return std::unique_ptr<pk_operations::signature>(new XMSS_Signature_Operation(*this));            }            throw Provider_Not_Found(algo_name(), provider);        }    }    // namespace crypto3}    // namespace nil#endif